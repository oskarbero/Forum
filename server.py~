import threading
import socket
import sys
import string

#TODO: Correct asynch server and primitives 
#TODO: Helper function to extract needed info from socket

class Group: 
    def __init__(self, name):
        self.name = name
        self.messages = []

class Message:
    def __init__(self, ip, port, u_name, timestamp):
        self.ip = ip
        self.port = port
        self.u_name = u_name
        self.timestamp = timestamp
        self.msg = []


#temporary server thing not actually asynch - need listening and such - 
class AsyncServer(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.groups = []

    def run(self):
        HOST = ''                 # Symbolic name meaning all available interfaces
        PORT = 50007              # Arbitrary non-privileged port
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.bind((HOST, PORT))
        s.listen(1)
        conn, addr = s.accept()
        print('Connected by', addr)
        while 1:
            data = conn.recv(1024)
            if not data: break
            conn.sendall(data)
        conn.close()

class ThreadedServer(object):
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.sock.bind((self.host, self.port))

    def listen(self):
        self.sock.listen(5)
        while True:
            client, address = self.sock.accept()
            client.settimeout(60)
            threading.Thread(target = self.listenToClient,args = (client,address)).start()

    def listenToClient(self, client, address):
        size = 1024
        while True:
            try:
                data = client.recv(size)
                if data:
                    response = data
                    client.send(response)
                else:
                    raise error('Client disconnected')
            except:
                client.close()
                return False

if __name__ == "__main__":
    port_num = input("Port? ")
    ThreadedServer('',port_num).listen()

server = AsyncServer()
server.data = ['hello', 'world']
server.start()
print('Server Running in background')

server.join()                     # Wait for the background task to finish
print('Main program waited until background was done.')
